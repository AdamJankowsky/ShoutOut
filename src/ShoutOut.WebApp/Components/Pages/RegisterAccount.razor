@page "/register-account"
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using ShoutOut.WebApp.Models

@inject RegistrationService RegistrationService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;

<PageTitle>ShoutOut - Register new account</PageTitle>

<MudGrid Class="mt-3" Justify="Justify.Center">
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm Model="@createAccount" @ref="@form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Username"
                              @bind-Value="createAccount.UserName"
                              For="@(() => createAccount.UserName)"
                              Required="true" RequiredError="User name is required!"/>
                <MudTextField T="string" Label="Email"
                              @bind-Value="createAccount.Email"
                              For="@(() => createAccount.Email)"
                              Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute { ErrorMessage = "The email address is invalid" })"/>
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))"
                              Required="true"
                              @bind-Value="createAccount.Password"
                              For="@(() => createAccount.Password)"
                              RequiredError="Password is required!"/>
                <MudTextField T="string"
                              Label="Password" HelperText="Repeat the password"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, string>(PasswordMatch))"/>
                <div class="d-flex">
                </div>
                <div class="d-flex align-center justify-space-between">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)"
                               Class="ml-auto" OnClick="@(async () => await CreateNewUser())">
                        Register
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" DropShadow="false"
                               OnClick="@(() => form.ResetAsync())" Class="mx-2">Reset
                    </MudButton>
                </div>
            </MudForm>
        </MudPaper>

    </MudItem>

</MudGrid>

@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;

    MudForm form;

    readonly CreateAccount createAccount = new()
    {
        Email = "",
        Password = "",
        UserName = ""
    };

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }

        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

    private async Task CreateNewUser()
    {
        if (form.IsValid)
        {
            RegistrationService.CreateAccount(createAccount);
            NavigationManager.NavigateTo("/login");
        }
    }
Ś}